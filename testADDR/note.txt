环境变量：环境变量是操作系统或应用程序中全局存储的键值对数据，用于定义进程的运行环境参数。
存储形式：以 “键 = 值”（如PATH=/usr/bin:/bin）的字符串形式存在，通常由操作系统或用户显式设置，PATH=/usr/bin:/bin表示执行ls命令时，系统会依次搜索/usr/bin和/bin目录，这也是为什么不带路径输入指令可以运行而不带路径运行自己写的程序运行不了，因为没有设置环境变量，依次搜索所有的目录都没有自己写的程序，command not found

查看环境变量：echo $PATH/echo $HOME指定用户的主工作目录/echo $SHELL当前Shell,它的值通常是/bin/bash
env/或者通过循环打印环境变量表/environ第三方指向父进程环境变量表的指针遍历打印
env：hostname主机名 user当前用户名 histsize 保存的历史命令条数 oldpwd 当前路径的上一个路径 
改变环境变量：PATH=$PATH+路径，不能掉了$PATH否则所有路径都会被覆盖，重新登陆就可以恢复，系统会重新设置PATH
设置新的环境变量：export XXX=xxxx，如果没有export会成为本地变量
取消设置的环境变量： unset 

通过系统调用获取到环境变量：char *getenv(const char *name);name是环境变量名

环境变量具有继承性：先来了解命令行参数，int main其实具有参数int argc,char* argv[],char* env[]，
第一个对应输入字符串的个数（这里bash会将输入的字符串按照空格分开）第二个对应着命令行参数表，第三个对应着环境变量表，
两张表其实是指针数组最后一个都会存放NULL，根据输入的命令不同，可以实现不同的功能，这也是ls -a/-l所运用的原理。
同时子进程会继承父进程的环境变量，初始的环境变量是bash从操作系统的配置文件中读取的

本地变量：set查看所有变量，包括本地变量以及环境变量，本地变量只在当前bash有效，不能被子进程继承，但是存在命令可以调用本地变量的情况，
补充：命令分为两种：常规命令：通过创建子进程完成以及内建命令：bash不创建子进程由bash亲自执行，eg：cd/echo

进程地址空间：
^高地址ffff ffff			经过验证发现所有的变量地址采用的是虚拟地址而不是物理地址,具体怎么对应？
 |						左边这块空间是进程地址空间也叫虚拟地址空间，是每个进程都会创建的，PCB中
 |		 栈区			有指向这块地址的指针，存储的是虚拟地址，如何联系到物理地址？通过页表，页表
 |	     向下增长			记录了每个虚拟地址对应的物理地址，是一种映射关系，当父进程创建子进程时，子
 |		   				进程创建自己的PCB，并且子进程共享父进程的虚拟地址空间布局（即子进程的虚拟
 |					 	地址空间与父进程完全一致）。子进程的页表初始时与父进程一致，如果发生写时拷
 |						贝，会改变虚拟地址与物理地址的映射关系，映射到新的物理地址。
 |	     向上增长
 |		 堆区
 |						地址空间是什么？本质是一个描述进程可视范围的大小，地址空间内一定要存在各种
 |	未初始化全局变量		区域划分，对虚拟地址（线性地址）记录start和end即可，地址空间本质是一个数据
 |	已初始化全局变量		结构对象，类似PCB一样，地址空间也是要被操作系统管理的，所以要先描述再组织
 |	    字符常量区			。也就是说创建子进程的时候不仅创建PCB还要创建mm_struct，这个结构体划分区
 |						域为4GB（以32位有32根地址总线为例，有2^32个地址），结构体内记录进程地址空
 |	       代码区			间每个区域的start和end，空间中每一个最小单位都有地址，可以直接使用。
 |
 |低地址0000 0000
mm_struct部分代码：
struct mm_struct
{	unsigned long total_vm, locked_vm, shared_vm, exec_vm;
	unsigned long stack_vm, reserved_vm, def_flags, nr_ptes;
	unsigned long start_code, end_code, start_data, end_data;
	unsigned long start_brk, brk, start_stack; ......
}
存在虚拟进程空间的意义：
1.让进程以统一的视角看待内存，不用直接管理物理内存上的存储空间与地址
2.增加进程虚拟地址空间可以让我们访问内存的时候，增加一个转换的过程，可以对寻址请求审查，拦截异常访问，保护物理内存

再来说说页表：保存在哪里？页表的物理地址临时存储在页目录基址寄存器（如 x86 的 CR3）上面，

